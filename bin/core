#!/usr/bin/env node

/**
 * Dependencies
 */

var program = require('commander')
  , repl = require('../lib/client/repl')
  , mongod = require('../lib/util/mongod')
  , path = require('path')
  , fs = require('fs')
  , request = require('request')
  , packageInfo = require('../package')
  , latestversionFile = path.join(__dirname, '../.latestversion')
  , Step = require('step')
  , semver = require('semver')
  , Server = require('../lib/server')
  , upgrade = require('doh').upgrade;

// require shell command to have them globally
require('shelljs/global');

/**
 * Get the version number from the package.json
 */

program
  .version(require('../package').version)
  .option('-m, --mongod [path]', 'path to mongod executable (defaults to `mongod`)')
  .option('-p, --port [port]', 'port to host server (defaults to 2403)')
  .option('-w, --wait', 'wait for input before exiting')
  .option('-d, --dashboard', 'start the dashboard immediately')
  .option('-o, --open', 'open in a browser')
  .option('-e, --environment [env]', 'defaults to development')
  .option('-H, --host [host]', 'specify host for mongo server')
  .option('-P, --mongoPort [mongoPort]', 'mongodb port to connect to')
  .option('-n, --dbname [dbname]', 'name of the mongo database')
  .option('-a, --auth', 'prompts for mongo server credentials')
  ;

/**
 * Commands
 */

program
  .command('create [project-name]')
  .description('\tcreate a project in a new directory\n\teg. `core create my-app`')
  .action(function(name) {
    name = name || 'my-app';
    if (test('-d',  name)) {
      return console.info(name + " already exists in this directory");
    }

    mkdir('-p', name);
    cp('-Rf', path.join(__dirname, '/createtemplate/*'), name);
    mkdir('-p', name + '/.core');
    mkdir('-p', name + '/.core/pids');
    ('').to(name + '/.core/pids/mongod');
    rm(ls('-R', name).filter(function(p) {
      return path.basename(p) === 'PLACEHOLDER';
    }).map(function(p) { return name + '/' + p}));

    if (program.dashboard || program.open) {
      start(name + '/app.core');
    } else {
      console.info('to start your app:');
      console.info('\t$ cd', name);
      console.info('\t$ core');
    }
  });

function start(file) {
  var port = program.port
    , host = program.host || '127.0.0.1'
    , dbname = program.dbname || '-core'
    , mongoPort = generatePort()
    , env = program.environment || 'development'
    , retries = 0
    , credentials
    ;

  if (!port) {
    port = 2403;
    retries = env === 'development' && 5;
  }

  if (program.mongoPort) {
      mongoPort = Number(program.mongoPort);
  }

  if (file) {
    process.chdir(path.dirname(file));
  }
  if (test('-f', 'app.core')) {
    console.log("starting CORE v" + packageInfo.version + "...");

    if (fs.existsSync(latestversionFile)) {
      var latest = fs.readFileSync(latestversionFile, 'utf-8');
      var canUpdate = which('core-update');
      if (latest && semver.gt(latest, packageInfo.version)) {
        console.log("CORE v" + latest + " is available." + (canUpdate ? " Update with core-update": ""));
        console.log();
      }
    }
    checkForUpdates();

    if (!test('-d', './.core')) mkdir('-p', './.core');
    if (!test('-d', './.core/pids')) mkdir('-p', './.core/pids');
    if (!test('-d', './data')) mkdir('-p', './data');

    if (program.auth && program.host === undefined) {
        console.error("Authentication requires the '-h' host flag... exiting.");
        process.exit();
    }

    if (program.host) {
        if (program.auth) {
            Step(function () {
                    var next = this;
                    credentials = {};
                    program.prompt('username: ', function(username){
                        if (username && username !== '') {
                            credentials.username = username;
                            next();
                        } else {
                            console.error('Username cannot be blank.');
                            process.exit();
                        }
                    });
                },
                function () {
                    var next = this;
                    program.password('Password: ', function(pass){
                        if (pass && pass !== '') {
                            credentials.password = pass;
                            next();
                        } else {
                            console.error('Password cannot be blank.');
                            process.exit();
                        }
                    });
                },
                startup
            );
        } else {
            startup();
        }
    } else {
        mongod.restart(program.mongod || 'mongod', env, mongoPort, startup);
    }

  } else {
    console.log("This directory does not contain a CORE app!");
    console.log("Use \"core create <appname>\" to create a new app");
    console.log("or use \"core path/to/app.core\" to start an app in another directory");
    stop(1);
  }

  function startup (err) {
      if (err) {
        console.log("Failed to start MongoDB (Make sure 'mongod' are in your $PATH or use dpd --mongod option.)");
        return stop(1);
      }

      var options = {port: port, env: 'development', db: {host: host, port: mongoPort, name: dbname}};

      options.env = program.environment || process.env.DPD_ENV || options.env;
      if(options.env !== 'development') console.log('starting in %s mode', options.env);

      if(credentials !== undefined) options.db.credentials = credentials;
      var dpd = createServer(options);
      dpd.on('listening', onListening);
      dpd.on('error', onError);
      dpd.listen();

      function onListening () {
        console.info('listening on port', options.port);
        var commands = repl(dpd);
        if (program.dashboard) {
          commands.dashboard();
        } else if (program.open) {
          commands.open();
        }
      }

      function onError (err) {
        if (err.code === "EADDRINUSE") {
          console.error();
          console.error("ERROR: port " + options.port + " is already in use");
          if (retries > 0) {
            options.port++;
            console.log("Trying again on port " + options.port + "...");
            console.log();
            retries--;
            dpd = createServer(options);
            dpd.on('listening', onListening);
            dpd.on('error', onError);
            dpd.listen();
          } else {
            process.exit();
          }
        } else {
          console.error(err);
          process.exit();
        }
      }
    }
}


program
  .command('keygen')
  .description('\tgenerate a key for remote access (./.core/keys.json)')
  .action(function() {
    var Keys = require('../lib/keys')
      , keys = new Keys();

    if ( keys.path.indexOf('.core') === 0 && !fs.existsSync('.core') ) fs.mkdirSync('.core');

    keys.create(function(err, key) {
      if(err) return console.error(err);
      console.log('created key', key.substr(0, 16) + '...');
    });
  });

program
  .command('showkey')
  .description('\tshows current key for connecting to remote dashboard (./.core/keys.json)')
  .action(function() {
    var Keys = require('../lib/keys')
      , keys = new Keys();

    keys.getLocal(function(err, key) {
      if(err) return console.error(err);
      if(!key) {
        console.log('No key file found. Run the following to create one:');
        console.log();
        console.log('core keygen');
        console.log();
        return;
      }
      console.log("Copy this key for use in remote dashboard");
      console.log();
      console.log(key);
      console.log();
    });
  });


program
  .command('*')
  .description('\t[default] start the server in the current project in development mode\n' +
               '\twith an interactive shell/repl for interacting with the running server\n' +
               '\te.g. core (starts server in current directory),\n' +
               '\t     core my-app/app.core (starts app from file)')
  .action(start);


function stop(code) {
  var fn = function() {
    exit(code);
  };

  if (program.wait) {
    process.stdin.resume();
    process.stdin.setRawMode(true);
    process.stdout.write('\nPress any key to continue...\n');
    process.stdin.on('keypress', fn);
  } else {
    fn();
  }
}

/**
 * Parse the arguments
 */

program.parse(process.argv);

if(program.args.length === 0) start();

/**
 * Port generation
 */

function generatePort() {
  var portRange = [ 3000, 9000 ];
  return Math.floor(Math.random() * (portRange[1] - portRange[0])) + portRange[0];
}

function checkForUpdates() {
  request('http://registry.npmjs.org/deployd', function(err, res, body) {
    if (!err) {
      var json;
      try {
        json = JSON.parse(body);
      } catch (ex) {}

      if (json && json['dist-tags'] && json['dist-tags'].latest) {
        var latest = json['dist-tags'].latest;
        fs.writeFile(latestversionFile, latest, function(err){
          // Need this callback function to prevent the process being killed, when latestversionFile is NOT writable
        });
      }
    }
  });
}

function createServer(config) {
  var server = new Server(config);
  server.options = config;
  upgrade(server);

  return server;
}
